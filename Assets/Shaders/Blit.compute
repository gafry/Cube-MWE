// Blit kernels
#pragma kernel BlitShadows
#pragma kernel BlitFinal

// Group size
#define size_x 24
#define size_y 24

#define M_PI (3.14159265358979323846264338327950288)

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> ShadowInput;
Texture2D<float4> ColorInput;
Texture2D<float4> DirectBuffer;
Texture2D<float4> IndirectBuffer;
Texture2D<float4> AOBuffer;
Texture2D<float4> GBufferNormalsAndMaterials;
RWTexture2D<float4> BlitOutput;
float LightProgress;
float LightIntensity;
int IndirectLightingOn;
int DirectLightingOn;
int AOOn;

float CalculateLightIntensity()
{
    float lightIntensity;
    float nightValue = 0.5f;
    float dayValue = 2.5f;
    float nightProgress = 0.65f;
    float dayProgress = 0.35f;
    if (LightProgress < 0.5f)
        lightIntensity = LightProgress * 2;
    else
        lightIntensity = (1.f - LightProgress) * 2;

    if (LightProgress >= dayProgress && LightProgress <= nightProgress) lightIntensity = nightValue;
    else if (LightProgress > nightProgress) lightIntensity = nightValue + ((dayValue - nightValue) / (1.0f - nightProgress)) * (LightProgress - nightProgress);
    else if (LightProgress < dayProgress) lightIntensity = dayValue - (nightValue + ((dayValue - nightValue) / (dayProgress - 0.0f)) * (LightProgress - 0.0f)) + nightValue;
    return lightIntensity;
}

[numthreads(size_x, size_y, 1)]
void BlitFinal(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float4 color = ColorInput.Load(dispatchThreadId);
    float4 shadow = ShadowInput.Load(dispatchThreadId);
    int material = (int)GBufferNormalsAndMaterials.Load(dispatchThreadId).w;
    float lightIntensity = 1.5f + CalculateLightIntensity();
    if (material == 2)
        BlitOutput[dispatchThreadId.xy] = color;
    else if (material == 0)
        BlitOutput[dispatchThreadId.xy] = color;
    else if (IndirectLightingOn)
        BlitOutput[dispatchThreadId.xy] = shadow * lightIntensity * color;
    else
        BlitOutput[dispatchThreadId.xy] = shadow * (lightIntensity / 2) * color;
}

[numthreads(size_x, size_y, 1)]
void BlitShadows(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    int material = (int)GBufferNormalsAndMaterials.Load(dispatchThreadId).w;
    if (material == 0)
        BlitOutput[dispatchThreadId.xy] = DirectBuffer.Load(dispatchThreadId);
    else if (DirectLightingOn && IndirectLightingOn && AOOn)
        BlitOutput[dispatchThreadId.xy] = ((DirectBuffer.Load(dispatchThreadId) * AOBuffer.Load(dispatchThreadId)) / M_PI) + 2 * IndirectBuffer.Load(dispatchThreadId);
    else if (DirectLightingOn && IndirectLightingOn)
        BlitOutput[dispatchThreadId.xy] = (DirectBuffer.Load(dispatchThreadId) / M_PI) + 2 * IndirectBuffer.Load(dispatchThreadId);
    else if (IndirectLightingOn && AOOn)
        BlitOutput[dispatchThreadId.xy] = (AOBuffer.Load(dispatchThreadId) / M_PI) + 2 * IndirectBuffer.Load(dispatchThreadId);
    else if (DirectLightingOn && AOOn)
        BlitOutput[dispatchThreadId.xy] = DirectBuffer.Load(dispatchThreadId) * AOBuffer.Load(dispatchThreadId);
    else if (IndirectLightingOn)
        BlitOutput[dispatchThreadId.xy] = IndirectBuffer.Load(dispatchThreadId);
    else if (AOOn)
        BlitOutput[dispatchThreadId.xy] = AOBuffer.Load(dispatchThreadId);
    else
        BlitOutput[dispatchThreadId.xy] = DirectBuffer.Load(dispatchThreadId);
}