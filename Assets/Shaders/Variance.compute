// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel EstimateVariance
#pragma kernel EstimateVarianceIndirect

// Group size
#define size_x 24
#define size_y 24

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> ShadowInput;
Texture2D<float4> IndirectBuffer;
RWTexture2D<float4> _OutputTarget;
float CameraX;
float CameraY;
float StartCoef;
float AdaptCoef;
int IndirectLightingOn;

static const float gaussianFilter5x5[5][5] =
{
    { 1.0 / 273.0, 4.0 / 273.0, 7.0 / 273.0, 4.0 / 273.0, 1.0 / 273.0 },
    { 4.0 / 273.0, 16.0 / 273.0, 26.0 / 273.0, 16.0 / 273.0, 4.0 / 273.0 },
    { 7.0 / 273.0, 26.0 / 273.0, 41.0 / 273.0, 26.0 / 273.0, 7.0 / 273.0 },
    { 4.0 / 273.0, 16.0 / 273.0, 26.0 / 273.0, 16.0 / 273.0, 4.0 / 273.0 },
    { 1.0 / 273.0, 4.0 / 273.0, 7.0 / 273.0, 4.0 / 273.0, 1.0 / 273.0 }
};

static const float gaussianFilter[3][3] =
{
    { 1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0 },
    { 1.0 / 8.0,  1.0 / 4.0, 1.0 / 8.0  },
    { 1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0 }
};

[numthreads(size_x, size_y, 1)]
void EstimateVariance(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float sum = 0.0f;
    float sum_2 = 0.0f;
    uint n = 0;

    int i = 3;

    // ixi sample
    for (int x = -i; x <= i; x++)
    {
        for (int y = -i; y <= i; y++)
        {
            int3 uv = dispatchThreadId + int3(x, y, 0);

            if (uv.x < 0 || uv.x >= CameraX || uv.y < 0 || uv.y >= CameraY)
            {
                continue;
            }

            n++;
            float y_i = ShadowInput.Load(uv).x;
            sum_2 += (y_i * y_i);
            sum += y_i;
        }
    }

    float invN = 1.0f / max(1, n);
    float mean = sum * invN;
    float besselCorrection = n / max(1, n - 1);

    float variance = max(0, (invN * sum - mean * mean) * besselCorrection);

    _OutputTarget[dispatchThreadId.xy] = float4(variance, variance, variance, 1);
}

[numthreads(size_x, size_y, 1)]
void EstimateVarianceIndirect(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float3 sum = 0.0f;
    float3 sum_2 = 0.0f;
    uint n = 0;

    int i = 3;

    // ixi sample
    for (int x = -i; x <= i; x++)
    {
        for (int y = -i; y <= i; y++)
        {
            int3 uv = dispatchThreadId + int3(x, y, 0);

            if (uv.x < 0 || uv.x >= CameraX || uv.y < 0 || uv.y >= CameraY)
            {
                continue;
            }

            n++;
            float3 y_i = ShadowInput.Load(uv).xyz;
            sum_2 += (y_i * y_i);
            sum += y_i;
        }
    }

    float invN = 1.0f / max(1, n);
    float mean = sum * invN;
    float besselCorrection = n / max(1, n - 1);

    float3 tmp = (invN * sum_2 - mean * mean) * besselCorrection;
    tmp = float3(max(0, tmp.x), max(0, tmp.y), max(0, tmp.z));
    float variance = sqrt(tmp.x * tmp.x + tmp.y * tmp.y + tmp.z * tmp.z);

    _OutputTarget[dispatchThreadId.xy] = float4(variance, variance, variance, 1);
}