// Each #kernel tells which function to compile
#pragma kernel EstimateVariance
#pragma kernel EstimateVarianceIndirect
#pragma kernel EstimateVarianceVertical
#pragma kernel EstimateVarianceHorizontal

// Group size
#define size_x 24
#define size_y 24

Texture2D<float4> ShadowInput;
RWTexture2D<float4> _OutputTarget;
RWTexture2D<float4> _OutputTarget2;
float CameraX;
float CameraY;
int IndirectLightingOn;

groupshared float3 horizontalPoints[960];
groupshared float3 verticalPointsSum[540];
groupshared float3 verticalPointsSum_2[540];

[numthreads(size_x, size_y, 1)]
void EstimateVariance(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float sum = 0.0f;
    float sum_2 = 0.0f;
    uint n = 0;

    int i = 3;

    // ixi sample
    for (int x = -i; x <= i; x++)
    {
        for (int y = -i; y <= i; y++)
        {
            int3 uv = dispatchThreadId + int3(x, y, 0);

            if (uv.x < 0 || uv.x >= CameraX || uv.y < 0 || uv.y >= CameraY)
            {
                continue;
            }

            n++;
            float y_i = ShadowInput.Load(uv).x;
            sum_2 += (y_i * y_i);
            sum += y_i;
        }
    }

    float invN = 1.0f / max(1, n);
    float mean = sum * invN;
    float besselCorrection = n / max(1, n - 1);

    float variance = max(0, (invN * sum - mean * mean) * besselCorrection);

    _OutputTarget[dispatchThreadId.xy] = float4(variance, variance, variance, 1);
}

[numthreads(size_x, size_y, 1)]
void EstimateVarianceIndirect(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float3 sum = 0.0f;
    float3 sum_2 = 0.0f;
    uint n = 0;

    int i = 3;

    // ixi sample
    for (int x = -i; x <= i; x++)
    {
        for (int y = -i; y <= i; y++)
        {
            int3 uv = dispatchThreadId + int3(x, y, 0);

            if (uv.x < 0 || uv.x >= CameraX || uv.y < 0 || uv.y >= CameraY)
            {
                continue;
            }

            n++;
            float3 y_i = ShadowInput.Load(uv).xyz;
            sum_2 += (y_i * y_i);
            sum += y_i;
        }
    }

    float invN = 1.0f / max(1, n);
    float mean = sum * invN;
    float besselCorrection = n / max(1, n - 1);

    float3 tmp = (invN * sum_2 - mean * mean) * besselCorrection;
    tmp = float3(max(0, tmp.x), max(0, tmp.y), max(0, tmp.z));
    float variance = sqrt(tmp.x * tmp.x + tmp.y * tmp.y + tmp.z * tmp.z);

    _OutputTarget[dispatchThreadId.xy] = float4(variance, variance, variance, 1);
}

[numthreads(960, 1, 1)]
void EstimateVarianceHorizontal(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    // Load data from texture
    float3 data = ShadowInput.Load(dispatchThreadId).xyz;

    // Save to shared memory
    horizontalPoints[dispatchThreadId.x] = data;

    // Sync threads
    GroupMemoryBarrierWithGroupSync();

    float3 sum = 0.0f;
    float3 sum_2 = 0.0f;
    float3 y_i;

    y_i = horizontalPoints[min(max(dispatchThreadId.x - 3, 0), 960)];
    sum += y_i;
    sum_2 = (y_i * y_i);

    y_i = horizontalPoints[min(max(dispatchThreadId.x - 2, 0), 960)];
    sum += y_i;
    sum_2 = (y_i * y_i);

    y_i = horizontalPoints[min(max(dispatchThreadId.x - 1, 0), 960)];
    sum += y_i;
    sum_2 = (y_i * y_i);

    y_i = data;
    sum += y_i;
    sum_2 = (y_i * y_i);

    y_i = horizontalPoints[min(max(dispatchThreadId.x + 1, 0), 960)];
    sum += y_i;
    sum_2 = (y_i * y_i);

    y_i = horizontalPoints[min(max(dispatchThreadId.x + 2, 0), 960)];
    sum += y_i;
    sum_2 = (y_i * y_i);

    y_i = horizontalPoints[min(max(dispatchThreadId.x + 3, 0), 960)];
    sum += y_i;
    sum_2 = (y_i * y_i);

    _OutputTarget[dispatchThreadId.xy] = float4(0, sum.x, sum.y, sum.z);
    _OutputTarget2[dispatchThreadId.xy] = float4(0, sum_2.x, sum_2.y, sum_2.z);
}

[numthreads(1, 540, 1)]
void EstimateVarianceVertical(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    // Load data from texture
    float4 data_2 = ShadowInput.Load(dispatchThreadId);
    float4 data = _OutputTarget.Load(dispatchThreadId);

    // Save to shared memory
    verticalPointsSum_2[dispatchThreadId.y] = float3(data_2.y, data_2.z, data_2.w);
    verticalPointsSum[dispatchThreadId.y] = float3(data.y, data.z, data.w);

    // Sync threads
    GroupMemoryBarrierWithGroupSync();

    float3 sum = 0.0f;
    float3 sum_2 = 0.0f;
    uint n = 0;
    float3 y_i;

    sum += verticalPointsSum[min(max(dispatchThreadId.y - 3, 0), 540)];
    sum_2 = verticalPointsSum_2[min(max(dispatchThreadId.y - 3, 0), 540)];

    sum += verticalPointsSum[min(max(dispatchThreadId.y - 2, 0), 540)];
    sum_2 = verticalPointsSum_2[min(max(dispatchThreadId.y - 2, 0), 540)];

    sum += verticalPointsSum[min(max(dispatchThreadId.y - 1, 0), 540)];
    sum_2 = verticalPointsSum_2[min(max(dispatchThreadId.y - 1, 0), 540)];

    sum += data;
    sum_2 = data_2;

    sum += verticalPointsSum[min(max(dispatchThreadId.y + 1, 0), 540)];
    sum_2 = verticalPointsSum_2[min(max(dispatchThreadId.y + 1, 0), 540)];

    sum += verticalPointsSum[min(max(dispatchThreadId.y + 2, 0), 540)];
    sum_2 = verticalPointsSum_2[min(max(dispatchThreadId.y + 2, 0), 540)];

    sum += verticalPointsSum[min(max(dispatchThreadId.y + 3, 0), 540)];
    sum_2 = verticalPointsSum_2[min(max(dispatchThreadId.y + 3, 0), 540)];

    n = 49;
    float invN = 1.0f / max(1, n);
    float mean = sum * invN;
    float besselCorrection = n / max(1, n - 1);

    float3 tmp;
    if (IndirectLightingOn > 0.5f)
        tmp = (invN * sum_2 - mean * mean) * besselCorrection;
    else 
        tmp = (invN * sum - mean * mean) * besselCorrection;
    tmp = float3(max(0, tmp.x), max(0, tmp.y), max(0, tmp.z));
    float variance = sqrt(tmp.x * tmp.x + tmp.y * tmp.y + tmp.z * tmp.z);

    _OutputTarget[dispatchThreadId.xy] = float4(variance, data.y, data.z, data.w);
}