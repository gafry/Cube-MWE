#pragma max_recursion_depth 11

#include "./../Shaders/Common.hlsl"

RWTexture2D<float4> _OutputTarget;
int _NumberOfSamples = 1;
int _FrameIndex;
int _FrameCounter;
float AOCoef;
Texture2D<float4> GBufferNormals;
Texture2D<float4> Position;

// A wrapper function that encapsulates shooting an ambient occlusion ray query
float shootAmbientOcclusionRay( float3 orig, float3 dir, float minT, float maxT )
{
	// Setup ambient occlusion ray and payload
	RayPayloadAO rayPayloadAO = { 0.0f };  // Specified value is returned if we hit a surface
	RayDesc rayDescriptor;
	rayDescriptor.Origin    = orig;               // Where does our ray start?
	rayDescriptor.Direction = dir;                // What direction does our ray go?
	rayDescriptor.TMin      = minT;               // Min distance to detect an intersection
	rayDescriptor.TMax      = maxT;               // Max distance to detect an intersection

	// Trace our ray.  Ray stops after it's first definite hit; never execute closest hit shader
	TraceRay(_AccelerationStructure,
		RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER,
		0xFF, 0, 1, 0, rayDescriptor, rayPayloadAO);

	// Copy our AO value out of the ray payload.
	return rayPayloadAO.AOValue;
}

[shader("raygeneration")]
void AORaygenShader()
{
	const uint2 dispatchIdx = DispatchRaysIndex().xy;
	const uint2 dispatchDim = DispatchRaysDimensions();

	uint randSeed = initRand(dispatchIdx.x + dispatchIdx.y * dispatchDim.x, _FrameCounter, 16);

	// Load the position and normal from our g-buffer
	float4 worldNorm = GBufferNormals[dispatchIdx];
	float4 worldPos = Position[dispatchIdx];

	// number of rays
	int numberOfRays = 4;

	// default AO
	float ambientOcclusion = 1.0f;

	// Our G-buffer stores 0 in worldPos.w for background pixels; only shoot an AO ray elsewhere
	if (worldPos.w != 0.0f)
	{
		// Start accumulating from zero if we don't hit the background
		ambientOcclusion = 0.0f;

		float rayLength = 0.15f * AOCoef;

		for (int i = 0; i < numberOfRays; i++)
		{
			// Sample cosine-weighted hemisphere around surface normal to pick a random ray direction
			float3 worldDir = getCosHemisphereSample(randSeed, worldNorm.xyz);

			// Shoot our ambient occlusion ray and update the value we'll output with the result
			ambientOcclusion += shootAmbientOcclusionRay(worldPos.xyz, worldDir, 3e-5f, rayLength);
		}
	} 
	else
	{
		_OutputTarget[dispatchIdx] = float4(1.0f, 1.0f, 1.0f, 1.0f);
		return;
	}

	float ResultAO = ambientOcclusion / float(numberOfRays);
	float4 color = float4(ResultAO, ResultAO, ResultAO, 1.0f);

	if (_FrameIndex > 1)
	{
		float a = 1.0f / (float)_FrameIndex;
		color = _OutputTarget[dispatchIdx] * (1.0f - a) + color * a;
	}

	//_OutputTarget[dispatchIdx] = float4(ResultAO, ResultAO, ResultAO, 1.0f);
	_OutputTarget[dispatchIdx] = color;
}

[shader("miss")]
void MissShader(inout RayPayloadAO rayPayloadAO : SV_RayPayload)
{
	rayPayloadAO.AOValue = 1.0f;
}