#pragma max_recursion_depth 11

#include "./../Shaders/Common.hlsl"
#include "./../Shaders/DirectRays.hlsl"
#include "./../Shaders/Shadows.hlsl"

// Input
Texture2D<float4> GBufferNormalsAndMaterials;
Texture2D<float4> GBufferPositionsAndDepth;
Texture2D<float4> ColorInput;
// Output
RWTexture2D<float4> _OutputTarget;
RWTexture2D<float4> _OutputTarget2;
// Variables
int _FrameCounter;
float3 LightPosition;
float LightProgress;
int SoftShadowsOn;
int IndirectLightingOn;
int DirectLightingOn;

[shader("raygeneration")]
void DirectAndIndirectRaygenShader()
{
	const uint2 dispatchIdx = DispatchRaysIndex().xy;
	const uint2 dispatchDim = DispatchRaysDimensions();

	// Load the position and normal from our g-buffer
	float4 worldPos = GBufferPositionsAndDepth[dispatchIdx];
	
	if (worldPos.w == 0.0f)
	{
		_OutputTarget[dispatchIdx] = float4(ColorInput[dispatchIdx].xyz, 1);
		_OutputTarget2[dispatchIdx] = float4(ColorInput[dispatchIdx].xyz, 1);
		return;
	}

	float3 worldNorm = GBufferNormalsAndMaterials[dispatchIdx].xyz;

	uint randSeed = initRand(dispatchIdx.x + dispatchIdx.y * dispatchDim.x, _FrameCounter, 16);

	float4 color = (0, 0, 0, 0);
	float direct = 0.0f;
	float sunSize = 100.0f;
	float3 indirect = float3(0.0f, 0.0f, 0.0f);

	int numOfIters = 4;
	float lightIntensity = 4.0f;

	for (int i = 0; i < numOfIters; i++)
	{
		if (DirectLightingOn > 0)
		{
			float distToLight;
			float3 dirToLight;

			if (SoftShadowsOn > 0)
			{
				// Get random sample on sphere and calculate direction and distance to light
				float3 sampleOnHemisphere = LightPosition + sunSize * GetPointOnSphere(randSeed);
				dirToLight = normalize(sampleOnHemisphere - worldPos);
				distToLight = length(sampleOnHemisphere - worldPos) - 0.2f;
			}
			else
			{
				// Calculate direction and distance to point light
				dirToLight = normalize(LightPosition - worldPos);
				distToLight = length(LightPosition - worldPos) - 0.2f;
			}

			// Shoot shadow ray to sun, calculate nDotL based on Lambert's cosine law and add the result
			float shadow = shootShadowRay(worldPos + worldNorm * 0.001f, dirToLight, 1.0e-4f, distToLight);
			float nDotL = max(0.0f, dot(worldNorm, dirToLight));
			direct += nDotL * max(0.0f, shadow);
		}
		
		if (IndirectLightingOn > 0)
		{
			// Create orthonormal basis as new coord system with normal as up vector,
			// get random cosine weighted direction and transform back to original coord system
			ONB onb = BuildONBFromNormal(worldNorm);
			float3 worldDir = ONBLocal(onb, GetRandomCosineDir(randSeed));
			//worldDir = getCosHemisphereSample(randSeed, worldNorm);
			float nDotL = max(0.0f, dot(worldNorm, worldDir));

			// Shoot indirect ray and multiply by nDotL based on Lambert's cosine law and add the result
			indirect += nDotL * shootIndirectLightRay(worldPos.xyz + worldNorm * 0.001f, worldDir, 1e-5f, 40, 1, randSeed);
		}
	}

	if (DirectLightingOn > 0)
	{
		direct = min(max(0.f, (direct / numOfIters)), 0.8f);
		float4 shadow = float4(direct, direct, direct, 1);
		_OutputTarget[dispatchIdx] = shadow;
	}

	if (IndirectLightingOn > 0)
	{
		_OutputTarget2[dispatchIdx] = 0.3f * float4(indirect / numOfIters, 1);
	}
}

[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload)
{
	float3 origin = WorldRayOrigin();
	float3 direction = WorldRayDirection();
	rayPayload.color = 0.5f * float4(BackgroundColor(origin, direction, LightProgress), 1.0f);
}

[shader("miss")]
void ShadowMiss(inout RayPayloadShadow shadowRayPayload : SV_RayPayload) 
{
    shadowRayPayload.visibility = 1.0f;
}

[shader("anyhit")]
void AnyHitShader(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
	AcceptHitAndEndSearch();
}