#pragma max_recursion_depth 11

#include "./../Shaders/Common.hlsl"

RWTexture2D<float4> _OutputTarget;
float4 _OutputTargetSize;
int _FrameIndex;
int _FrameCounter;
int _DepthOfRecursion;
float3 LightPosition;

inline float3 BackgroundColor(float3 origin, float3 direction)
{
	float3 normLightVector = normalize(float3(0, 0, 0) - LightPosition);
	float distToLight = distance(origin, LightPosition);
	float3 normMissVector = normalize(float3(0, 0, 0) - (distToLight * direction));
	float dist = distance(normLightVector, normMissVector);
	float t = (dist - 0.03f) / (2 - 0.03f);
	
	if (t < 0.03)
		return float3(1.0f, 1.0f, 1.0f);
	else
	{
		return (1.0f - t) * float3(1.0f, 1.0f, 1.0f) + t * float3(0.0f, 0.0f, 0.0f);
	}

	//float t = 0.5f * (direction.y + 1.0f);
	//return (1.0f - t) * float3(1.0f, 1.0f, 1.0f) + t * float3(0.5f, 0.7f, 1.0f);
}

[shader("raygeneration")]
void MyRaygenShader()
{
	const uint2 dispatchIdx = DispatchRaysIndex().xy;
	const uint2 dispatchDim = DispatchRaysDimensions();

	uint randSeed = initRand(dispatchIdx.x + dispatchIdx.y * dispatchDim.x, _FrameCounter, 16);

	float4 color = (0,0,0,0);

	float3 origin;
	float3 direction;
	float2 offset = float2(nextRand(randSeed), nextRand(randSeed));
	GenerateCameraRayWithOffset(origin, direction, offset);

	RayDesc rayDescriptor;
	rayDescriptor.Origin = origin;
	rayDescriptor.Direction = direction;
	rayDescriptor.TMin = 1e-5f;
	rayDescriptor.TMax = _CameraFarDistance;

	// Create and init the ray payload
	RayPayload rayPayload;

	rayPayload.randomSeed = randSeed;
	rayPayload.remainingDepth = _DepthOfRecursion - 1;
	rayPayload.color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	TraceRay(_AccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, 0xFF, 0, 1, 0, rayDescriptor, rayPayload);

	color = rayPayload.color;
	color = float4(sqrt(color.r), sqrt(color.g), sqrt(color.b), color.a);

	if (_FrameIndex > 1)
	{
		float a = 1.0f / (float)_FrameIndex;
		color = _OutputTarget[dispatchIdx] * (1.0f - a) + color * a;
	}

  _OutputTarget[dispatchIdx] = color;
}

[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload)
{
	float3 origin = WorldRayOrigin();
	float3 direction = WorldRayDirection();
	rayPayload.color = float4(BackgroundColor(origin, direction), 1.0f);
}

#include "./../Shaders/Shadows.hlsl"

[shader("miss")]
void ShadowMiss(inout RayPayloadShadow shadowRayPayload : SV_RayPayload) {
    shadowRayPayload.visibility = 1.0f;
}

[shader("anyhit")]
void AnyHitShader(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
	AcceptHitAndEndSearch();
}