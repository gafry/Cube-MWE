#pragma max_recursion_depth 11

#include "./../Shaders/Common.hlsl"

float LightProgress;

RWTexture2D<float4> _OutputTarget;
RWTexture2D<float4> _OutputTarget2;
RWTexture2D<float4> _OutputTarget3;
RWTexture2D<float4> _OutputTarget4;

Texture2D<float4> Materials;
SamplerState sampler_Materials;

[shader("raygeneration")]
void GBufferRaygenShader()
{
	const uint2 dispatchIdx = DispatchRaysIndex().xy;
	
    float3 origin;
	float3 direction;

	GenerateCameraRay(origin, direction);

	RayDesc rayDescriptor;
	rayDescriptor.Origin = origin;
	rayDescriptor.Direction = direction;
	rayDescriptor.TMin = 1e-5f;
	rayDescriptor.TMax = _CameraFarDistance;

	// Create and init the ray payload
	RayPayloadGBuffer rayPayload;
	rayPayload.normal = float3(0.0f, 0.0f, 0.0f);
	rayPayload.worldPosition = float3(0.0f, 0.0f, 0.0f);
	rayPayload.albedo = float3(0.0f, 0.0f, 0.0f);
	rayPayload.distance = 0.0f;
	rayPayload.id = 0.0f;
	rayPayload.material = 0.0f;

	TraceRay(_AccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, 0xFF, 0, 1, 0, rayDescriptor, rayPayload);

	// Normals and material
	_OutputTarget[dispatchIdx] = float4(rayPayload.normal, rayPayload.material);
	// World positions and depth buffer
	_OutputTarget2[dispatchIdx] = float4(rayPayload.worldPosition, rayPayload.distance / _CameraFarDistance);
	// Albedo
	_OutputTarget3[dispatchIdx] = float4(rayPayload.albedo, 1.0f);
	// IDs
	_OutputTarget4[dispatchIdx] = float4(0, 0, 0, rayPayload.id);
}

[shader("anyhit")]
void AnyHitShader(inout RayPayloadGBuffer rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
	AcceptHitAndEndSearch();
}

[shader("miss")]
void MissShader(inout RayPayloadGBuffer rayPayload : SV_RayPayload)
{
	float3 origin = WorldRayOrigin();
	float3 direction = WorldRayDirection();
	rayPayload.albedo = BackgroundColor(origin, direction, LightProgress);
}